introduction

in the world of hackers, the kind of answers you get to your technical questions depends as much on the way you ask the questions as on the difficulty of developing the answer. this guide will teach you how to ask questions in a way more likely to get you a satisfactory answer.

now that use of open source has become widespread, you can often get as good answers from other, more experienced users as from hackers. this is a good thing; users tend to be just a little bit more tolerant of the kind of failures newbies often have. still, treating experienced users like hackers in the ways we recommend here will generally be the most effective way to get useful answers out of them, too.

the first thing to understand is that hackers actually like hard problems and good, thought-provoking questions about them. if we didn't, we wouldn't be here. if you give us an interesting question to chew on we'll be grateful to you; good questions are a stimulus and a gift. good questions help us develop our understanding, and often reveal problems we might not have noticed or thought about otherwise. among hackers, ¡§good question!¡¨ is a strong and sincere compliment.

despite this, hackers have a reputation for meeting simple questions with what looks like hostility or arrogance. it sometimes looks like we're reflexively rude to newbies and the ignorant. but this isn't really true.

what we are, unapologetically, is hostile to people who seem to be unwilling to think or to do their own homework before asking questions. people like that are time sinks ¡X they take without giving back, and they waste time we could have spent on another question more interesting and another person more worthy of an answer. we call people like this ¡§losers¡¨ (and for historical reasons we sometimes spell it ¡§lusers¡¨).

we realize that there are many people who just want to use the software we write, and who have no interest in learning technical details. for most people, a computer is merely a tool, a means to an end; they have more important things to do and lives to live. we acknowledge that, and don't expect everyone to take an interest in the technical matters that fascinate us. nevertheless, our style of answering questions is tuned for people who do take such an interest and are willing to be active participants in problem-solving. that's not going to change. nor should it; if it did, we would become less effective at the things we do best.

we're (largely) volunteers. we take time out of busy lives to answer questions, and at times we're overwhelmed with them. so we filter ruthlessly. in particular, we throw away questions from people who appear to be losers in order to spend our question-answering time more efficiently, on winners.

if you find this attitude obnoxious, condescending, or arrogant, check your assumptions. we're not asking you to genuflect to us ¡X in fact, most of us would love nothing more than to deal with you as an equal and welcome you into our culture, if you put in the effort required to make that possible. but it's simply not efficient for us to try to help people who are not willing to help themselves. it's ok to be ignorant; it's not ok to play stupid.

so, while it isn't necessary to already be technically competent to get attention from us, it is necessary to demonstrate the kind of attitude that leads to competence ¡X alert, thoughtful, observant, willing to be an active partner in developing a solution. if you can't live with this sort of discrimination, we suggest you pay somebody for a commercial support contract instead of asking hackers to personally donate help to you.

if you decide to come to us for help, you don't want to be one of the losers. you don't want to seem like one, either. the best way to get a rapid and responsive answer is to ask it like a person with smarts, confidence, and clues who just happens to need help on one particular problem.

(improvements to this guide are welcome. you can mail suggestions to esr@thyrsus.com or respond-auto@linuxmafia.com. note however that this document is not intended to be a general guide to netiquette, and we will generally reject suggestions that are not specifically related to eliciting useful answers in a technical forum.)

before you ask

before asking a technical question by e-mail, or in a newsgroup, or on a website chat board, do the following:

1.try to find an answer by searching the archives of the forum or mailing list you plan to post to.

2.try to find an answer by searching the web.

3.try to find an answer by reading the manual.

4.try to find an answer by reading a faq.

5.try to find an answer by inspection or experimentation.

6.try to find an answer by asking a skilled friend.

7.if you're a programmer, try to find an answer by reading the source code.

when you ask your question, display the fact that you have done these things first; this will help establish that you're not being a lazy sponge and wasting people's time. better yet, display what you have learned from doing these things. we like answering questions for people who have demonstrated they can learn from the answers.

use tactics like doing a google search on the text of whatever error message you get (searching google groups as well as web pages). this might well take you straight to fix documentation or a mailing list thread answering your question. even if it doesn't, saying ¡§i googled on the following phrase but didn't get anything that looked promising¡¨ is a good thing to do in e-mail or news postings requesting help, if only because it records what searches won't help. it will also help to direct other people with similar problems to your thread by linking the search terms to what will hopefully be your problem and resolution thread.

take your time. do not expect to be able to solve a complicated problem with a few seconds of googling. read and understand the faqs, sit back, relax and give the problem some thought before approaching experts. trust us, they will be able to tell from your questions how much reading and thinking you did, and will be more willing to help if you come prepared. don't instantly fire your whole arsenal of questions just because your first search turned up no answers (or too many).

prepare your question. think it through. hasty-sounding questions get hasty answers, or none at all. the more you do to demonstrate that having put thought and effort into solving your problem before seeking help, the more likely you are to actually get help.

beware of asking the wrong question. if you ask one that is based on faulty assumptions, j. random hacker is quite likely to reply with a uselessly literal answer while thinking ¡§stupid question...¡¨, and hoping the experience of getting what you asked for rather than what you needed will teach you a lesson.

never assume you are entitled to an answer. you are not; you aren't, after all, paying for the service. you will earn an answer, if you earn it, by asking a substantial, interesting, and thought-provoking question ¡X one that implicitly contributes to the experience of the community rather than merely passively demanding knowledge from others.

on the other hand, making it clear that you are able and willing to help in the process of developing the solution is a very good start. ¡§would someone provide a pointer?¡¨, ¡§what is my example missing?¡¨, and ¡§what site should i have checked?¡¨ are more likely to get answered than ¡§please post the exact procedure i should use.¡¨ because you're making it clear that you're truly willing to complete the process if someone can just point you in the right direction.

when you ask

choose your forum carefully

be sensitive in choosing where you ask your question. you are likely to be ignored, or written off as a loser, if you:

post your question to a forum where it's off topic

post a very elementary question to a forum where advanced technical questions are expected, or vice-versa

cross-post to too many different newsgroups

post a personal e-mail to somebody who is neither an acquaintance of yours nor personally responsible for solving your problem

hackers blow off questions that are inappropriately targeted in order to try to protect their communications channels from being drowned in irrelevance. you don't want this to happen to you.

the first step, therefore, is to find the right forum. again, google and other web-searching methods are your friend. use them to find the project webpage most closely associated with the hardware or software giving you difficulties. usually it will have links to a faq (frequently asked questions) list, and to project mailing lists and their archives. these mailing lists are the final places to go for help, if your own efforts (including reading those faqs you found) do not find you a solution. the project page may also describe a bug-reporting procedure, or have a link to one; if so, follow it.

shooting off an e-mail to a person or forum which you are not familiar with is risky at best. for example, do not assume that the author of an informative webpage wants to be your free consultant. do not make optimistic guesses about whether your question will be welcome ¡X if you're unsure, send it elsewhere, or refrain from sending it at all.

when selecting a web forum, newsgroup or mailing list, don't trust the name by itself too far; look for a faq or charter to verify your question is on-topic. read some of the back traffic before posting so you'll get a feel for how things are done there. in fact, it's a very good idea to do a keyword search for words relating to your problem on the newsgroup or mailing list archives before you post. it may find you an answer, and if not it will help you formulate a better question.

don't shotgun-blast all the available help channels at once, that's like yelling and irritates people. step through them softly.

know what your topic is! one of the classic mistakes is asking questions about the unix or windows programming interface in a forum devoted to a language or library or tool portable across both. if you don't understand why this is a blunder, you'd be best off not asking any questions at all until you get it.

in general, questions to a well-selected public forum are more likely to get useful answers than equivalent questions to a private one. there are multiple reasons for this. one is simply the size of the pool of potential respondents. another is the size of the audience; hackers would rather answer questions that educate many people than questions serving only a few.

understandably, skilled hackers and authors of popular software are already receiving more than their fair share of mis-targeted messages. by adding to the flood, you could in extreme cases even be the straw that breaks the camel's back ¡X quite a few times, contributors to popular projects have withdrawn their support because collateral damage in the form of useless e-mail traffic to their personal accounts became unbearable.